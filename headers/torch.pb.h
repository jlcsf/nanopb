/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_VACCEL_TORCH_PB_H_INCLUDED
#define PB_VACCEL_TORCH_PB_H_INCLUDED
#include <pb.h>
#include "error.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _vaccel_TorchDataType {
    /* Add unused value here so that we are compatible
 with what vAccelRT returns us */
    vaccel_TorchDataType_TORCH_UNUSED = 0,
    vaccel_TorchDataType_UInt8 = 1,
    vaccel_TorchDataType_Int8 = 2,
    vaccel_TorchDataType_Int16 = 3,
    vaccel_TorchDataType_Int32 = 4,
    vaccel_TorchDataType_Int64 = 5,
    vaccel_TorchDataType_Half = 6,
    vaccel_TorchDataType_float = 7
} vaccel_TorchDataType;

/* Struct definitions */
typedef struct _vaccel_TorchTensor {
    /* Data of the tensor */
    pb_callback_t data;
    /* Dimensions of the tensor */
    pb_callback_t dims;
    /* Data type */
    vaccel_TorchDataType type;
} vaccel_TorchTensor;

/* Jitload_forward */
typedef struct _vaccel_TorchJitloadForwardRequest {
    uint32_t session_id;
    int64_t model_id;
    /* Run options */
    pb_callback_t run_options;
    /* Input tensors */
    pb_callback_t in_tensors;
} vaccel_TorchJitloadForwardRequest;

typedef struct _vaccel_TorchJitloadForwardResult {
    /* An inference result is a number of output tensors */
    pb_callback_t out_tensors;
} vaccel_TorchJitloadForwardResult;

typedef struct _vaccel_TorchJitloadForwardResponse {
    pb_size_t which_result;
    union {
        vaccel_VaccelError error;
        vaccel_TorchJitloadForwardResult torch_result;
    } result;
} vaccel_TorchJitloadForwardResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _vaccel_TorchDataType_MIN vaccel_TorchDataType_TORCH_UNUSED
#define _vaccel_TorchDataType_MAX vaccel_TorchDataType_float
#define _vaccel_TorchDataType_ARRAYSIZE ((vaccel_TorchDataType)(vaccel_TorchDataType_float+1))

#define vaccel_TorchTensor_type_ENUMTYPE vaccel_TorchDataType





/* Initializer values for message structs */
#define vaccel_TorchTensor_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, _vaccel_TorchDataType_MIN}
#define vaccel_TorchJitloadForwardRequest_init_default {0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define vaccel_TorchJitloadForwardResult_init_default {{{NULL}, NULL}}
#define vaccel_TorchJitloadForwardResponse_init_default {0, {vaccel_VaccelError_init_default}}
#define vaccel_TorchTensor_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, _vaccel_TorchDataType_MIN}
#define vaccel_TorchJitloadForwardRequest_init_zero {0, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define vaccel_TorchJitloadForwardResult_init_zero {{{NULL}, NULL}}
#define vaccel_TorchJitloadForwardResponse_init_zero {0, {vaccel_VaccelError_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define vaccel_TorchTensor_data_tag              1
#define vaccel_TorchTensor_dims_tag              2
#define vaccel_TorchTensor_type_tag              3
#define vaccel_TorchJitloadForwardRequest_session_id_tag 1
#define vaccel_TorchJitloadForwardRequest_model_id_tag 2
#define vaccel_TorchJitloadForwardRequest_run_options_tag 3
#define vaccel_TorchJitloadForwardRequest_in_tensors_tag 4
#define vaccel_TorchJitloadForwardResult_out_tensors_tag 1
#define vaccel_TorchJitloadForwardResponse_error_tag 1
#define vaccel_TorchJitloadForwardResponse_torch_result_tag 2

/* Struct field encoding specification for nanopb */
#define vaccel_TorchTensor_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              1) \
X(a, CALLBACK, REPEATED, UINT32,   dims,              2) \
X(a, STATIC,   SINGULAR, UENUM,    type,              3)
#define vaccel_TorchTensor_CALLBACK pb_default_field_callback
#define vaccel_TorchTensor_DEFAULT NULL

#define vaccel_TorchJitloadForwardRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   session_id,        1) \
X(a, STATIC,   SINGULAR, INT64,    model_id,          2) \
X(a, CALLBACK, SINGULAR, BYTES,    run_options,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  in_tensors,        4)
#define vaccel_TorchJitloadForwardRequest_CALLBACK pb_default_field_callback
#define vaccel_TorchJitloadForwardRequest_DEFAULT NULL
#define vaccel_TorchJitloadForwardRequest_in_tensors_MSGTYPE vaccel_TorchTensor

#define vaccel_TorchJitloadForwardResult_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  out_tensors,       1)
#define vaccel_TorchJitloadForwardResult_CALLBACK pb_default_field_callback
#define vaccel_TorchJitloadForwardResult_DEFAULT NULL
#define vaccel_TorchJitloadForwardResult_out_tensors_MSGTYPE vaccel_TorchTensor

#define vaccel_TorchJitloadForwardResponse_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (result,error,result.error),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (result,torch_result,result.torch_result),   2)
#define vaccel_TorchJitloadForwardResponse_CALLBACK NULL
#define vaccel_TorchJitloadForwardResponse_DEFAULT NULL
#define vaccel_TorchJitloadForwardResponse_result_error_MSGTYPE vaccel_VaccelError
#define vaccel_TorchJitloadForwardResponse_result_torch_result_MSGTYPE vaccel_TorchJitloadForwardResult

extern const pb_msgdesc_t vaccel_TorchTensor_msg;
extern const pb_msgdesc_t vaccel_TorchJitloadForwardRequest_msg;
extern const pb_msgdesc_t vaccel_TorchJitloadForwardResult_msg;
extern const pb_msgdesc_t vaccel_TorchJitloadForwardResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define vaccel_TorchTensor_fields &vaccel_TorchTensor_msg
#define vaccel_TorchJitloadForwardRequest_fields &vaccel_TorchJitloadForwardRequest_msg
#define vaccel_TorchJitloadForwardResult_fields &vaccel_TorchJitloadForwardResult_msg
#define vaccel_TorchJitloadForwardResponse_fields &vaccel_TorchJitloadForwardResponse_msg

/* Maximum encoded size of messages (where known) */
/* vaccel_TorchTensor_size depends on runtime parameters */
/* vaccel_TorchJitloadForwardRequest_size depends on runtime parameters */
/* vaccel_TorchJitloadForwardResult_size depends on runtime parameters */
/* vaccel_TorchJitloadForwardResponse_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
