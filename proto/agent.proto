/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package vaccel;
import "session.proto";
import "resources.proto";
import "image.proto";
import "tensorflow.proto";
import "torch.proto";
import "genop.proto";
import "profiling.proto";
import "nanopb.proto";



service VaccelAgent {
	// Session handling
	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
	rpc UpdateSession(UpdateSessionRequest) returns (VaccelEmpty);
	rpc DestroySession(DestroySessionRequest) returns (VaccelEmpty);

	// vAccelRT resource handling
	rpc CreateResource(CreateResourceRequest) returns (CreateResourceResponse);
	rpc RegisterResource(RegisterResourceRequest) returns (VaccelEmpty);
	rpc UnregisterResource(UnregisterResourceRequest) returns (VaccelEmpty);
	rpc DestroyResource(DestroyResourceRequest) returns (VaccelEmpty);

	// Image Classification API
	rpc ImageClassification(ImageClassificationRequest) returns (ImageClassificationResponse);

	// TensorFlow inference API
	rpc TensorflowModelLoad(TensorflowModelLoadRequest) returns (TensorflowModelLoadResponse);
	rpc TensorflowModelUnload(TensorflowModelUnloadRequest) returns (TensorflowModelUnloadResponse);
	rpc TensorflowModelRun(TensorflowModelRunRequest) returns (TensorflowModelRunResponse);

	// PyTorch inference API
	//rpc TorchModelLoad(TorchModelLoadRequest) returns (TorchModelLoadResponse);
	//rpc TorchModelUnload(TorchModelUnloadRequest) returns (TorchModelUnloadResponse);
	rpc TorchJitloadForward(TorchJitloadForwardRequest) returns (TorchJitloadForwardResponse);

	// Generic Operation API
	rpc Genop(GenopRequest) returns (GenopResponse);

	// Profiling Operation API
	rpc GetTimers(ProfilingRequest) returns (ProfilingResponse);

	// NanoPB function calls
	rpc VaccelFunction(VaccelRequest) returns (VaccelResponse);
}

message VaccelEmpty {}

enum VaccelFunctionType {
	UNUSED = 0;
	CREATE_SESSION = 1;
	UPDATE_SESSION = 2;
	DESTROY_SESSION = 3;
	CREATE_RESOURCE = 4;
	REGISTER_RESOURCE = 5;
	UNREGISTER_RESOURCE = 6;
	DESTROY_RESOURCE = 7;
	IMAGE_CLASSIFICATION = 8;
	TENSORFLOW_MODEL_LOAD = 9;
	TENSORFLOW_MODEL_UNLOAD = 10;
	TENSORFLOW_MODEL_RUN = 11;
	TORCH_JITLOAD_FORWARD = 12;
	GENOP = 13;
	GET_TIMERS = 14;
	VACCEL_FUNCTION = 15;
}

message VaccelRequest {
    VaccelFunctionType function_type = 1;
    oneof function_args{
		CreateSessionRequest CreateSessionRequest = 2;
		UpdateSessionRequest UpdateSessionRequest = 3;
		DestroySessionRequest DestroySessionRequest = 4;
	}
}

message VaccelResponse {
    VaccelFunctionType function_type = 1;
	oneof function_args{
		CreateSessionResponse CreateSessionResponse = 2;
		VaccelEmpty UpdateSessionRequest = 3;
		VaccelEmpty DestroySessionRequest = 4;
	}
}